{
  "extends": "./tsconfig.base",
  "compilerOptions": {
    // "incremental": true                    /* 开启增量编译, 这是 v3.4 新增属性, 在编译过程中会生成一个 tsconfig.tsbuildinfo 的缓存文件, 它会存储在 outDir 配置的路径下, 用于提升下次编译的编译速度 */,
    // "tsBuildInfoFile": "./.cache"          /* 指定增量编译生成缓存文件的位置和名称 */,

    // "diagnostics":true                     /* 将编译的诊断信息打印在终端 */,

    "target": "ES5"                           /* 指定 ECMAScript 的编译目标版本, 默认是 es3 */,
    "module": "commonjs"                      /* 指定编译的模块系统 */,
    // "outFile": "./app.js",                 /* 将多个互相依赖的模块合并到一个文件, 常用于声称 AMD 模块, 注意当 outFile 开启时, module 只能选择 none, amd, system */

    // "lib": ["esnext"],                     /* 指定 JavaScript 需要的类库, 比如 target 为 ES5 时, 它会默认引入 dom, es5, scripthost */

    // "allowJs": true                        /* 允许编译器编译 .js, .jsx 文件 */,
    // "checkJs": true,                       /* 报告编译 js 文件时的错误, 通常与 allowJs 一起使用 */

    "jsx": "preserve"                         /* 编译 tsx 文件. preserve 将 tsx 编译成 jsx; react 将 tsx 编译成 React.createElement 格式的 js 文件; react-native 类似于 preserve   */,

    // "declaration": true,                   /* 生成声明文件 */
    // "declarationMap": true,                /* 给每个声明文件生成 sourcemap */
    // "declarationDir": "",                  /* 指定声明文件的路径 */
    // "emitDeclarationOnly": true,           /* 只生成声明文件 */

    // "sourceMap": true,                     /* Generates corresponding '.map' file. */
   
    "outDir": "./dist/"                       /* 指定编译后文件的存放目录 */,
    "rootDir": "./src"                        /* 指定开始编译的根目录, 默认是项目的根目录. 假设设置为 ./src , 就不应该在 src 之外还有 ts 文件了  */,

    // "composite": true,                     /* Enable project compilation */

    // "removeComments": true,                /* Do not emit comments to output. */
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true                            /* Enable all strict type-checking options. */,
    "noImplicitAny": true                     /* Raise error on expressions and declarations with an implied 'any' type. */,
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true                 /* Raise error on 'this' expressions with an implied 'any' type. */,
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true                   /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    "allowUmdGlobalAccess": true,             /* 允许从模块访问UMD全局变量 */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": true            /* Enables experimental support for ES7 decorators. */,
    "emitDecoratorMetadata": true             /* Enables experimental support for emitting type metadata for decorators. */
  }
}
